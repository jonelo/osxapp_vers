#!/bin/bash

# osxapp_vers 1.16
# Get product name, product version and build version of [Mac] OS X
# from "Install*OS X*.app", "Install macOS *.app" or "Mac OS X install DVD"
#
# Copyright 2015-2025 Johann N. Loefflmann
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Explicitly set the PATH
PATH="/sbin:/usr/sbin:/bin:/usr/bin"

# Prints one token from a xml content, prints nothing if there is no match
# Params: $1: xml content, $2: key in the xml, $3: key name in the output
function print_xml_token {
    # Extract the token name from the xml
    if [[ "$1" =~ \<key\>$2\</key\>[[:space:]]*\<string\>([^\<]+)\</string\> ]]; then
        printf "$3:\t%s\n" "${BASH_REMATCH[1]}"
    fi
}

# Prints ProductName, ProductVersion and BuildVersion from a xml content
# Params: $1: the name of the xml file
function print_xml_info {
    XMLCONTENT="$1"

    print_xml_token "$XMLCONTENT" 'ProductName' 'ProductName'
    print_xml_token "$XMLCONTENT" 'ProductVersion' 'ProductVersion'
    print_xml_token "$XMLCONTENT" 'ProductBuildVersion' 'BuildVersion'
    printf "\n"
}

# Supported OS names for the "Install *OS X <name>.app", resp. 
# "Install macOS <name>.app", update list if applicable
SUPPORTED_OS=('Tahoe' 'Sequoia' 'Sonoma' 'Ventura' 'Monterey' 'Big Sur' 'Catalina' 'Mojave' 'High Sierra' 'Sierra' 'El Capitan' 'Yosemite' 'Mavericks' 'Mountain Lion' 'Lion')

# Do we want verbose output?
if [ -z "$DEBUG" ]; then
    DEBUG=/dev/null
else
    DEBUG=/dev/stdout
fi

# Backup and set the Internal Field Separator (IFS) to newline,
# because there are blanks in the filename called "Install OS X *.app"
IFS_BACKUP=$IFS
IFS=$'\n'

if [ $# = 0 ]; then
    # No args have been given
    # Find any OS X/macOS installers known to the Spotlight
    FILES=$(
             mdfind "kMDItemFSName == 'Install OS X *.app'" 2>/dev/null;\
             mdfind "kMDItemFSName == 'Install macOS *.app'" 2>/dev/null;\
           )
else
    # Use the program arguments as the input
    FILES=$(printf "%s\n" "$@")
fi

# Error message if there is no installer
if [ -z "$FILES" ]; then
    printf "INFO:  There is no \"Install *OS X *.app\" and no \"Install macOS *.app\" known to Spotlight\n"
else
    for FILE in $FILES; do
        # print the app folder
        printf "%s:\n" "$FILE"

        # Remove everything from the end including . (non-greedy)
        # In other words, .app or .app/ will be removed from the end
        APPNAME=${FILE%.*}

        # Remove everything from the beginning including "OS X " or "macOS "
        OSNAME=${APPNAME}
        OSNAME=${OSNAME##*OS\ X\ }
        OSNAME=${OSNAME##*macOS\ }

        # Re-add the .app suffix
        APPNAME="$APPNAME.app"

        if [ -z "$NOCHECK" ]; then
            # NOCHECK is not set
            # Is the .app supported by this script?
            SUPPORTED=0
            for OS in "${SUPPORTED_OS[@]}"
            do
                if [ "$OSNAME" = "$OS" ]; then
                    SUPPORTED=1
                fi
            done
        else
            SUPPORTED=1
        fi

        if [ $SUPPORTED -eq 0 ]; then
            printf "ERROR: Investigating the %s installer is not supported by this script.\n" "$OSNAME"
            printf "       Set the NOCHECK environment variable to bypass this check.\n"
        else
            # The macOS Sierra installer leaves the mount point called "/Volumes/OS X Install ESD" open
            # after closing it, so let's try to unmount it now ...
            hdiutil detach "/Volumes/OS X Install ESD" &> $DEBUG
            # exit code 16 means "Resource busy"
            if [ $? -eq 16 ]; then
                # Give the user the option to close the installer manually.
                printf "ERROR: Resource is in use. Please close the Apple installer. Exit.\n"
                exit
            fi

            if [ -f "$APPNAME/Contents/SharedSupport/SharedSupport.dmg" ]; then
                # The macOS Monterey installer (12.0.1) leaves the mount point open
                # after closing it, so let's unmount it now ...
                hdiutil detach "/Volumes/Shared Support" &> $DEBUG

                # Starting with Big Sur (>= 11.0.1)
                hdiutil attach "$APPNAME/Contents/SharedSupport/SharedSupport.dmg" \
                    -noverify -nobrowse -mountpoint /Volumes/BaseSystem.$$ &> $DEBUG

                CONTCODE=11

            elif [ -f "$APPNAME/Contents/SharedSupport/BaseSystem.dmg" ]; then
                # Starting with High Sierra (>= 10.13)
                hdiutil attach "$APPNAME/Contents/SharedSupport/BaseSystem.dmg" \
                    -noverify -nobrowse -mountpoint /Volumes/BaseSystem.$$ &> $DEBUG

                CONTCODE=1

            elif [ -f "$APPNAME/Contents/SharedSupport/InstallESD.dmg" ]; then
                # Anything earlier then High Sierra (< 10.13) ...
                hdiutil attach "$APPNAME/Contents/SharedSupport/InstallESD.dmg" \
                    -noverify -nobrowse -mountpoint /Volumes/InstallESD.$$ &> $DEBUG

                hdiutil attach "/Volumes/InstallESD.$$/BaseSystem.dmg" \
                    -noverify -nobrowse -mountpoint /Volumes/BaseSystem.$$ &> $DEBUG

                CONTCODE=2

            elif [ -f "/macOS Install Data/BaseSystem.dmg" ]; then
                printf "INFO: this an install stub and the install stub was running.\n"
                # BaseSystem.dmg location is different if we have an install stub and
                # the install stub was running
                hdiutil attach "/macOS Install Data/BaseSystem.dmg" \
                    -noverify -nobrowse -mountpoint /Volumes/BaseSystem.$$ &> $DEBUG

                CONTCODE=1

            else
                printf "ERROR: this seems to be an install stub only, run it in order to download the required files.\n"
                CONTCODE=0

            fi

            # call sw_vers in the changed root environment
            # sudo chroot "/Volumes/BaseSystem.$$" /usr/bin/sw_vers

            if [ $CONTCODE -eq 11 ]; then
                if [ -d "/Volumes/BaseSystem.$$/SFR/" ]; then
                    XMLCONTENT=$(unzip -c /Volumes/BaseSystem.$$/SFR/com_apple_MobileAsset_SFRSoftwareUpdate/*.zip AssetData/boot/SystemVersion.plist)
                # e.g. macOS 13.5.1
                else
                    XMLCONTENT=$(unzip -c /Volumes/BaseSystem.$$/com_apple_MobileAsset_MacSoftwareUpdate/*.zip AssetData/boot/SystemVersion.plist)
                fi
                CONTCODE=1
            else
                XMLCONTENT=$(<"/Volumes/BaseSystem.$$/System/Library/CoreServices/SystemVersion.plist")
            fi

            if [ $CONTCODE -gt 0 ]; then
                # Read the xml and print info
                print_xml_info "$XMLCONTENT"

                # Unmount again in reverse order
                hdiutil detach "/Volumes/BaseSystem.$$" &> $DEBUG

                if [ $CONTCODE -gt 1 ]; then
                    hdiutil detach "/Volumes/InstallESD.$$" &> $DEBUG
                fi
            fi
        fi
    done
fi

# And now let's do it for any mounted Mac OS X Install CD/DVD images
# (Mac OS X 10.0 Cheetah) - Mac OS X 10.6 Snow Leopard)
#
if [ $# = 0 ]; then
    # No args have been given
    # Find any mounted Mac OS X Install CD/DVD images in /Volumes
    FILES=$(ls -ld1 /Volumes/Mac\ OS\ X\ Install\ * 2>/dev/null)

    # Message if there are no mounted DVD images 
    if [ -z "$FILES" ]; then
        printf "INFO: No mounted Mac OS X Install CD/DVD images found\n"
        printf "      (no \"Mac OS X Install *\" in /Volumes)\n"
    else
        for FILE in $FILES; do
            XML="$FILE/System/Library/CoreServices/SystemVersion.plist"
            # there are also Disk 2 and Disk 3 CDs that don't contain
            # an installer
            if [ -f "$XML" ]; then
                # print the app folder
                printf "%s:\n" "$FILE"
                print_xml_info "$XML"
            else
                printf "INFO: \"%s\" found, but it does not contain an installer\n" "$FILE"
            fi
        done
    fi
fi

# Restore the IFS
IFS=$IFS_BACKUP
